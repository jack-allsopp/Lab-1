;*****************************************************************
;* This stationery serves as the framework for a                 *
;* user application (single file, absolute assembly application) *
;* For a more comprehensive program that                         *
;* demonstrates the more advanced functionality of this          *
;* processor, please see the demonstration applications          *
;* located in the examples subdirectory of the                   *
;* Freescale CodeWarrior for the HC12 Program directory          *
;*****************************************************************

; export symbols
            XDEF Entry, _Startup            ; export 'Entry' symbol
            ABSENTRY Entry        ; for absolute assembly: mark this as application entry point



; Include derivative-specific definitions 
		INCLUDE 'derivative.inc' 

ROMStart    EQU  $4000  ; absolute address to place my code/constant data

; variable/data section

            ORG RAMStart
 ; Insert here your data definition.
            array       DC.B  $3F,$06,$5B,$4F
            number_of_elements DC.B  4
            dig_on      DC.B  $0E, $0D, $0B, $07  ; left to right

       ; stack frame
            ; define the position of each component of the stack
            number_count equ 3
            array_pointer equ 1
            ;current_count    equ 0


; code section
            ORG   ROMStart

Entry:
_Startup:
            LDS   #RAMEnd+1       ; initialize the stack pointer

            CLI                     ; enable interrupts
mainLoop:
            ;7-Seg configuration 
            ldaa #$FF
            staa DDRB
            staa DDRJ
            ldaa #00
            staa PTJ
            ldaa #$0F
            staa DDRP

            ; fill in the values on the stack to send to the function
            MOVB  number_of_elements, 1, -SP  ; one byte for the number of elements                           
            MOVW  #array, 2, -SP     ; two bytes for address of array       

            jsr print           
            
            leas 3, SP  ; deallocate the memory - basically move the SP 
                        ; to where it was before we called the function
                        
            bra mainLoop
                                
            
print: 
            ; store the registers temporarily while we run the subroutine
            PSHX           
            PSHA
            PSHB

            ldx   array_pointer, SP
            ldaa  number_count, SP            

send_digit:
            ldab  1, x+
            stab PORTB     ; turn port B on
	    ;staa current_count,SP
	    ;ldaa number_count, SP
	    ;suba current_count,SP 
	    ;staa current_count,SP ; get the current count of number to enable the correct 7-Seg
            ;ldy dig_on, SP
	    ;ldab 1, y+
	    ;staa PTP       
            bsr delay
            
            deca
            bne send_digit
            
            bra finish_function
           
finish_function:
            
            ldab number_count, SP  ; load the number count into register A
     
            ; clear the local variable, restore the stack pointer
            leas  1, SP
            
            ; restore the registers to their former values before we started using them            
            PULB
            PULA
            PULX
            rts

delay:
          ldy #4000
          delay_loop:

               dbne y, delay_loop
       
          rts		; return from subroutine


;**************************************************************
;*                 Interrupt Vectors                          *
;**************************************************************
            ORG   $FFFE
            DC.W  Entry           ; Reset Vector
